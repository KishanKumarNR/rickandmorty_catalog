{"version":3,"sources":["components/IdentityCard.component.tsx","components/Showcase.component.tsx","components/Navbar.component.tsx","services/Api.service.ts","App.tsx","serviceWorker.ts","index.tsx","assets/images/Cartoon_Network_1992_logo.svg","assets/images/double-bubble-dark.png","assets/images/Rick_and_Morty_logo.png"],"names":["props","content","id","name","image","key","className","onClick","e","setActiveCharacter","src","alt","characters","map","c","index","useState","undefined","myFormRef","React","createRef","Navbar","style","styles","NavbarContainer","bg","variant","Brand","href","logo","require","Nav","Link","target","rel","page","count","resetAll","Form","inline","onSubmit","filterByName","current","value","console","log","FormControl","type","placeholder","ref","Button","width","a","fetch","response","json","info","encodeURIComponent","gender","specie","url","Api","getCharactersByPage","filterCharacters","getCharactersByName","getCharacterCount","getCharacterById","getAllCharacters","useStyles","makeStyles","theme","createStyles","root","display","appBar","zIndex","drawer","backgroundColor","height","flexShrink","drawerPaper","drawerContainer","overflow","marginLeft","flexGrow","padding","spacing","App","classes","setCount","setCharacters","setNotFound","setPage","paginator","setPaginator","modalActive","setModalActive","modalCharacter","setModalCharacter","useEffect","then","setupShowcase","catch","errorShowcase","setGender","setSpecie","applyFilters","results","next","Number","split","prev","error","backgroundImage","Background","backgroundSize","backgroundPosition","backgroundRepeat","CssBaseline","AppBar","position","searchValue","Drawer","paper","Toolbar","List","ListItemText","primary","Divider","component","FormLabel","RadioGroup","aria-label","onChange","event","FormControlLabel","control","Radio","label","DropdownButton","title","onSelect","evt","newArrayCharacters","slice","sort","b","parseFloat","Dropdown","Item","eventKey","data","Pagination","text","Prev","Next","status","species","origin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.7e1d03c0.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n// @ts-ignore\nimport Api from \"../services/Api.service\";\n\nexport default function (props: any) {\n    let {id, name, image} = props.content;\n\n    return (\n        <div\n            key={id}\n            id={id}\n            className=\"Card\"\n            onClick={e => props.setActiveCharacter(id)}\n        >\n            <div className=\"Card-image\">\n                <figure>\n                    <img src={image} alt={name} />\n                </figure>\n            </div>\n            <div className=\"Card-description\">\n                <div className=\"Card-name\">\n                    <h3>{name}</h3>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport IDCard from \"./IdentityCard.component\";\n\nexport default function (props: any) {\n    return (\n        <div className=\"\">\n            <div className=\"\">\n                {/*<h1>Rick and morty characters {props.count}</h1>*/}\n                <div className=\"Cards-container\">\n                    {props.characters.map((c: any, index: number) =>\n                        <IDCard key={index} content={c} setActiveCharacter={props.setActiveCharacter}></IDCard>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}","import React, {useState} from \"react\";\nimport {Button, Form, FormControl, Nav, Navbar} from \"react-bootstrap\";\nimport logo from \"../assets/images/Cartoon_Network_1992_logo.svg\";\n\nexport default function (props: any) {\n    let [searchValue, setSearchValue] = useState(undefined);\n    let myFormRef = React.createRef();\n    const handleChange = () => {\n        props.filterByName(myFormRef.current.value);\n        console.log(\"yes Im coming\", myFormRef.current.value)\n    }\n\n    return (\n        <>\n            <Navbar style={styles.NavbarContainer} bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </Navbar.Brand>\n                <img src={require('../assets/images/Rick_and_Morty_logo.png')} className=\"App-logo\"/>\n                <Nav className=\"mr-auto\">\n                    {/*<Nav.Link href=\"#home\">Home</Nav.Link>*/}\n\n                    <Nav.Link className=\"App-link customNavTxtLink\"\n                              href=\"https://rickandmortyapi.com/\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\">\n                        Rick & Morty character catalog {20*props.page - 20} - {20*props.page} of {props.count} showing.\n                    </Nav.Link>\n                    <Nav.Link className=\"resetbtn\" href=\"#features\"\n                              onClick={props.resetAll}\n                    >Reset</Nav.Link>\n                </Nav>\n                <Form inline onSubmit={handleChange}>\n                    <FormControl type=\"text\" placeholder=\"Search by name\" className=\"mr-sm-2\" ref={myFormRef}/>\n                    <Button variant=\"outline-info\">Search</Button>\n                </Form>\n            </Navbar>\n            <br/>\n        </>\n    )\n}\n\nconst styles = {\n   NavbarContainer: {\n       width: \"100%\"\n   }\n};\n","// Returns the characters count for use in the first load\n// @ts-ignore\nasync function getCharacterCount() {\n    const response = await fetch(\"https://rickandmortyapi.com/api/character/\");\n    const { info } = await response.json();\n    return info.count;\n}\n\n// Returns one character data for use in individual components\nasync function getCharacterById(id: number) {\n    const response = await fetch(\n        `https://rickandmortyapi.com/api/character/${id}`\n    );\n    return response.json();\n}\n\nasync function getAllCharacters() {\n    const response = await fetch(`https://rickandmortyapi.com/api/character/`);\n    return response.json();\n}\n\nasync function getCharactersByName(name: string) {\n    const response = await fetch(`https://rickandmortyapi.com/api/character/?name=${encodeURIComponent(name)}`);\n    return response.json();\n}\n\nasync function filterCharacters(gender: string, specie: string) {\n    let url = `https://rickandmortyapi.com/api/character/?`;\n    if (gender) {\n        url += `gender=${encodeURIComponent(gender)}&`\n    }\n    if (specie) {\n        url += `species=${encodeURIComponent(specie)}&`\n    }\n    const response = await fetch(url);\n    return response.json();\n}\n\n// returns all characters iterative\n// async function getAllCharacters() {\n//   const { info, results } = await rickmortyapi.getCharacter()\n//   let characters = [\n//     ...results\n//   ]\n\n//   for (let i = 2; i <= info.pages; i++) {\n//     console.log('Voy en', i)\n//     const { results } = await rickmortyapi.getCharacter({ page: i })\n//     characters = [\n//       ...characters,\n//       ...results\n//     ]\n//   }\n\n//   return characters\n// }\n\n// // returns all characters recursively\n// async function getCharactersFromPage(pageNumber = 1) {\n//   let characters = []\n//   const { info, results } = await rickmortyapi.getCharacter({ page: pageNumber })\n\n//   if (info.next !== '') {\n//     characters = await getCharactersFromPage(pageNumber + 1)\n//   }\n\n//   return [\n//     ...characters,\n//     ...results\n//   ]\n// }\n\nasync function getCharactersByPage(url: string) {\n    const response = await fetch(url);\n    return response.json();\n}\n\nconst Api = {\n    getCharactersByPage,\n    filterCharacters,\n    getCharactersByName,\n    getCharacterCount,\n    getCharacterById,\n    getAllCharacters\n    // getCharactersFromPage\n};\n\nexport default Api;","import React, {useState, useEffect} from 'react';\nimport Showcase from \"./components/Showcase.component\"\n\nimport './App.css';\nimport Navbar from \"./components/Navbar.component\";\n// @ts-ignore\nimport Api from \"./services/Api.service\"\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport {FormControl, FormLabel, FormControlLabel, RadioGroup, Radio} from \"@material-ui/core\";\nimport {DropdownButton, Dropdown, Pagination} from \"react-bootstrap\";\nimport Background from \"./assets/images/double-bubble-dark.png\"\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n            backgroundColor: \"#343a40 !important\",\n            height: \"20px !important\"\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        drawerContainer: {\n            overflow: 'auto',\n            marginLeft: \"24px\"\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n        },\n    }),\n);\nfunction App() {\n    const classes = useStyles();\n  let [count, setCount] = useState(0);\n  let [characters, setCharacters] = useState([]);\n  let [notFound, setNotFound] = useState(false);\n  let [page, setPage] = useState(1);\n  let [paginator, setPaginator] = useState({});\n  let [modalActive, setModalActive] = useState(false);\n  let [modalCharacter, setModalCharacter] = useState({});\n\n  useEffect(() => {\n      Api.getAllCharacters()\n          .then(setupShowcase)\n          .catch(errorShowcase)\n  }, [])\n\n    const filterByName = (searchValue: any) => {\n        // logger.debug(`submitted with query: ${this.state.searchValue}`);\n        Api.getCharactersByName(searchValue)\n            .then(setupShowcase)\n            .catch(errorShowcase);\n    }\n\n    const resetAll = () => {\n        Api.getAllCharacters()\n            .then(setupShowcase)\n            .catch(errorShowcase)\n        setGender('');\n        setSpecie('');\n    }\n\n    const [gender, setGender] = React.useState('');\n    const [specie, setSpecie] = React.useState('');\n\n    const handleGenderInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setGender((event.target as HTMLInputElement).value);\n    };\n\n    const handleSpeciesInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSpecie((event.target as HTMLInputElement).value);\n    };\n\n\n    useEffect(() => {\n        applyFilters();\n    }, [specie, gender]);\n\n    const applyFilters = () => {\n        Api.filterCharacters(gender, specie)\n            .then(setupShowcase)\n            .catch(errorShowcase)\n    }\n\n    const setupShowcase = (response: any) => {\n        const {info, results} = response;\n        let page = 0;\n        if (info && info.next) {\n            page = info && Number(info.next.split(\"=\")[1]);\n            page = page-1;\n        } else if (info && info.prev) {\n            page = info && Number(info.prev.split(\"=\")[1]);\n            page = page+1;\n        }\n        setCount(info.count);\n        setCharacters(results);\n        setNotFound(false);\n        setPaginator({...info});\n        setPage(page)\n    }\n\n    const errorShowcase = (error: any) => {\n        setCount(0);\n        setCharacters([]);\n        setNotFound(true);\n        setPaginator({});\n        setPage(0)\n        console.log(error);\n    }\n\n    const setActiveCharacter = (id: number) => {\n        Api.getCharacterById(id).then(data => {\n            console.log(data);\n            setModalCharacter(data)\n            setModalActive(true);\n        });\n    }\n\n    const unsetActiveCharacter = () => {\n        setModalCharacter({});\n        setModalActive(false);\n    }\n\n    const handleSelect = (evt) => {\n        // what am I suppose to write in there to get the value?\n        console.log(evt)\n        var newArrayCharacters = newArrayCharacters = characters.slice();;\n        switch(evt) {\n            case(\"ascending\"):\n                newArrayCharacters.sort((a, b) => parseFloat(a.id) - parseFloat(b.id));\n                break;\n            case(\"descending\"):\n                newArrayCharacters.sort((a, b) => parseFloat(b.id) - parseFloat(a.id));\n                break;\n        }\n        setCharacters(newArrayCharacters);\n    }\n\n    const handlePaginator = (event: any) => {\n        console.log(\"paginating\", event.target.text);\n        switch(event.target.text) {\n            case(\"›Next\"):\n                paginator.next && Api.getCharactersByPage(paginator.next).then(setupShowcase).catch(errorShowcase)\n                break;\n            case(\"‹Previous\"):\n                paginator.prev && Api.getCharactersByPage(paginator.prev).then(setupShowcase).catch(errorShowcase)\n                break;\n        }\n    }\n\n\n    return (\n    <div className=\"App\" style = {{ backgroundImage: `url(${Background})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center center',\n        backgroundRepeat: 'no-repeat',\n    }}>\n        {/*<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />*/}\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n      {/*<header className=\"App-header\">*/}\n      {/*    */}\n      {/*</header>*/}\n        <CssBaseline />\n        <AppBar position=\"fixed\" className={classes.appBar}>\n\n                <Navbar page={page} count={count} filterByName={filterByName} resetAll={resetAll}/>\n\n        </AppBar>\n\n          <Drawer\n              className={classes.drawer}\n              variant=\"permanent\"\n              classes={{\n                  paper: classes.drawerPaper,\n              }}\n          >\n              <Toolbar />\n              <div className={classes.drawerContainer}>\n                  <List>\n                      <ListItemText primary={\"Filters\"} />\n                  </List>\n                  <Divider />\n                  <List>\n                      <FormControl component=\"fieldset\">\n                          <FormLabel component=\"legend\">Species</FormLabel>\n                          <RadioGroup aria-label=\"gender\" name=\"gender1\" value={specie} onChange={handleSpeciesInput}>\n                              <FormControlLabel value=\"Human\" control={<Radio />} label=\"Human\" />\n                              <FormControlLabel value=\"Humanoid\" control={<Radio />} label=\"Humanoid\" />\n                          </RadioGroup>\n                      </FormControl>\n                  </List>\n                  <Divider>\n                  </Divider>\n                  <List>\n                      <FormControl component=\"fieldset\">\n                          <FormLabel component=\"legend\">Gender</FormLabel>\n                          <RadioGroup aria-label=\"gender\" name=\"gender1\" value={gender} onChange={handleGenderInput}>\n                              <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\n                              <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\n                              <FormControlLabel value=\"unknown\" control={<Radio />} label=\"unknown\" />\n                          </RadioGroup>\n                      </FormControl>\n                  </List>\n              </div>\n          </Drawer>\n          <main className={classes.content+ ' ' +\"App-container\"}>\n              <Toolbar />\n              <div className=\"d-block ml-auto filterCardIdBtn\">\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Filter by Id\" onSelect={handleSelect}>\n                      <Dropdown.Item eventKey='ascending'>Ascending</Dropdown.Item>\n                      <Dropdown.Item eventKey='descending'>Descending</Dropdown.Item>\n                  </DropdownButton>\n              </div>\n              <Showcase setActiveCharacter={setActiveCharacter} characters={characters}></Showcase>\n          <Pagination onClick={handlePaginator}>\n              {/*<Pagination.First />*/}\n              <Pagination.Prev />\n              <Pagination.Item>{page}</Pagination.Item>\n              <Pagination.Next />\n              {/*<Pagination.Last />*/}\n          </Pagination>\n          </main>\n        {modalActive ? (\n            <div className=\"Modal\" onClick={e => unsetActiveCharacter()}>\n                {/*<div className=\"Pickle-container\">*/}\n                {/*    <figure>*/}\n                {/*        <img src={pickle} alt=\"pickle-rick\" />*/}\n                {/*    </figure>*/}\n                {/*</div>*/}\n\n                <div className=\"Card-detail\">\n                    <div className=\"Card-image\">\n                        <figure>\n                            <img src={modalCharacter.image} alt={modalCharacter.name} />\n                        </figure>\n                    </div>\n                    <div className=\"Card-detail-description\">\n                        <div className=\"Card-name\">\n                            <h3>{modalCharacter.name}</h3>\n                            <div className=\"Characteristic\">\n                                <p>Status</p>\n                                <p className=\"Characteristic-value\">\n                                    {modalCharacter.status}\n                                </p>\n                            </div>\n                            <div className=\"Characteristic\">\n                                <p>Specie</p>\n                                <p className=\"Characteristic-value\">\n                                    {modalCharacter.species}\n                                </p>\n                            </div>\n                            <div className=\"Characteristic\">\n                                <p>Gender</p>\n                                <p className=\"Characteristic-value\">\n                                    {modalCharacter.gender}\n                                </p>\n                            </div>\n                            <div className=\"Characteristic\">\n                                <p>Origin</p>\n                                <p className=\"Characteristic-value\">\n                                    {modalCharacter.origin.name}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Cartoon_Network_1992_logo.3c26307a.svg\";","module.exports = __webpack_public_path__ + \"static/media/double-bubble-dark.444cea35.png\";","module.exports = __webpack_public_path__ + \"static/media/Rick_and_Morty_logo.42d6efdb.png\";"],"sourceRoot":""}